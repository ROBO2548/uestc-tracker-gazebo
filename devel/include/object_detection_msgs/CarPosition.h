// Generated by gencpp from file object_detection_msgs/CarPosition.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MSGS_MESSAGE_CARPOSITION_H
#define OBJECT_DETECTION_MSGS_MESSAGE_CARPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace object_detection_msgs
{
template <class ContainerAllocator>
struct CarPosition_
{
  typedef CarPosition_<ContainerAllocator> Type;

  CarPosition_()
    : header()
    , xmean(0.0)
    , ymean(0.0)
    , zmean(0.0)  {
    }
  CarPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , xmean(0.0)
    , ymean(0.0)
    , zmean(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _xmean_type;
  _xmean_type xmean;

   typedef double _ymean_type;
  _ymean_type ymean;

   typedef double _zmean_type;
  _zmean_type zmean;





  typedef boost::shared_ptr< ::object_detection_msgs::CarPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection_msgs::CarPosition_<ContainerAllocator> const> ConstPtr;

}; // struct CarPosition_

typedef ::object_detection_msgs::CarPosition_<std::allocator<void> > CarPosition;

typedef boost::shared_ptr< ::object_detection_msgs::CarPosition > CarPositionPtr;
typedef boost::shared_ptr< ::object_detection_msgs::CarPosition const> CarPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection_msgs::CarPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection_msgs::CarPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection_msgs::CarPosition_<ContainerAllocator1> & lhs, const ::object_detection_msgs::CarPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.xmean == rhs.xmean &&
    lhs.ymean == rhs.ymean &&
    lhs.zmean == rhs.zmean;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection_msgs::CarPosition_<ContainerAllocator1> & lhs, const ::object_detection_msgs::CarPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_msgs::CarPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_msgs::CarPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_msgs::CarPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88b1fb8816b2426364b93b43e1f32170";
  }

  static const char* value(const ::object_detection_msgs::CarPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88b1fb8816b24263ULL;
  static const uint64_t static_value2 = 0x64b93b43e1f32170ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection_msgs/CarPosition";
  }

  static const char* value(const ::object_detection_msgs::CarPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 xmean\n"
"float64 ymean\n"
"float64 zmean\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::object_detection_msgs::CarPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.xmean);
      stream.next(m.ymean);
      stream.next(m.zmean);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection_msgs::CarPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection_msgs::CarPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xmean: ";
    Printer<double>::stream(s, indent + "  ", v.xmean);
    s << indent << "ymean: ";
    Printer<double>::stream(s, indent + "  ", v.ymean);
    s << indent << "zmean: ";
    Printer<double>::stream(s, indent + "  ", v.zmean);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MSGS_MESSAGE_CARPOSITION_H
